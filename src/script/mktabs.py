#!/usr/bin/env python
# -*- coding: utf-8 -*-

import struct

# NELEM = 512
# AM = ['0b 000 010 111',
#       '0b 000 011 011',
#       '0b 000 011 111',
#       '0b 000 110 010',
#       '0b 000 110 011',
#       '0b 000 110 110',
#       '0b 000 110 111',
#       '0b 000 111 011',
#       '0b 000 111 111',
#       '0b 010 110 000',
#       '0b 010 110 010',
#       '0b 010 110 011',
#       '0b 010 110 100',
#       '0b 010 110 110',
#       '0b 010 110 111',
#       '0b 011 110 000',
#       '0b 011 110 010',
#       '0b 011 110 100',
#       '0b 011 110 110',
#       '0b 100 110 010',
#       '0b 100 110 011',
#       '0b 100 110 100',
#       '0b 100 110 110',
#       '0b 100 110 111',
#       '0b 100 111 011',
#       '0b 100 111 111',
#       '0b 110 110 000',
#       '0b 110 110 010',
#       '0b 110 110 011',
#       '0b 110 110 100',
#       '0b 110 110 110',
#       '0b 110 110 111',
#       '0b 111 010 000',
#       '0b 111 110 000',
#       '0b 111 110 010',
#       '0b 111 110 100',
#       '0b 111 110 110']

NELEM = 256
AM = ['0b 000 00 111',
      '0b 000 01 011',
      '0b 000 01 111',
      '0b 000 10 010',
      '0b 000 10 011',
      '0b 000 10 110',
      '0b 000 10 111',
      '0b 000 11 011',
      '0b 000 11 111',
      '0b 010 10 000',
      '0b 010 10 010',
      '0b 010 10 011',
      '0b 010 10 100',
      '0b 010 10 110',
      '0b 010 10 111',
      '0b 011 10 000',
      '0b 011 10 010',
      '0b 011 10 100',
      '0b 011 10 110',
      '0b 100 10 010',
      '0b 100 10 011',
      '0b 100 10 100',
      '0b 100 10 110',
      '0b 100 10 111',
      '0b 100 11 011',
      '0b 100 11 111',
      '0b 110 10 000',
      '0b 110 10 010',
      '0b 110 10 011',
      '0b 110 10 100',
      '0b 110 10 110',
      '0b 110 10 111',
      '0b 111 00 000',
      '0b 111 10 000',
      '0b 111 10 010',
      '0b 111 10 100',
      '0b 111 10 110']

AM = [x.replace(' ', '') for x in AM]
RAM = ['0b' + x[2:][::-1] for x in AM]
NUM = [int(x, 2) for x in AM]
RNUM = [int(x, 2) for x in RAM]

import pdb
pdb.set_trace()


def dump_tab(out, num):
    tab = [0] * NELEM
    for n in num:
        tab[n] = 1
    with open(out, 'wb') as f:
        for i in range(NELEM):
            f.write(struct.pack('1B', tab[i]))
    f.close()

dump_tab('ltab.dat', NUM)
dump_tab('rtab.dat', RNUM)
